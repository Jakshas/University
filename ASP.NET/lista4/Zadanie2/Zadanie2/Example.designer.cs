#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zadanie2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ASPL4Z2")]
	public partial class ExampleDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertPASSWORD(PASSWORD instance);
    partial void UpdatePASSWORD(PASSWORD instance);
    partial void DeletePASSWORD(PASSWORD instance);
    partial void InsertUSERSROLES(USERSROLES instance);
    partial void UpdateUSERSROLES(USERSROLES instance);
    partial void DeleteUSERSROLES(USERSROLES instance);
    partial void InsertROLES(ROLES instance);
    partial void UpdateROLES(ROLES instance);
    partial void DeleteROLES(ROLES instance);
    #endregion
		
		public ExampleDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ASPL4Z2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ExampleDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExampleDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExampleDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExampleDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<USER> USER
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<PASSWORD> PASSWORD
		{
			get
			{
				return this.GetTable<PASSWORD>();
			}
		}
		
		public System.Data.Linq.Table<USERSROLES> USERSROLES
		{
			get
			{
				return this.GetTable<USERSROLES>();
			}
		}
		
		public System.Data.Linq.Table<ROLES> ROLES
		{
			get
			{
				return this.GetTable<ROLES>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[USER]")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _email;
		
		private EntityRef<PASSWORD> _PASSWORD;
		
		private EntitySet<USERSROLES> _USERSROLES;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public USER()
		{
			this._PASSWORD = default(EntityRef<PASSWORD>);
			this._USERSROLES = new EntitySet<USERSROLES>(new Action<USERSROLES>(this.attach_USERSROLES), new Action<USERSROLES>(this.detach_USERSROLES));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_PASSWORD", Storage="_PASSWORD", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public PASSWORD PASSWORD
		{
			get
			{
				return this._PASSWORD.Entity;
			}
			set
			{
				PASSWORD previousValue = this._PASSWORD.Entity;
				if (((previousValue != value) 
							|| (this._PASSWORD.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PASSWORD.Entity = null;
						previousValue.USER = null;
					}
					this._PASSWORD.Entity = value;
					if ((value != null))
					{
						value.USER = this;
					}
					this.SendPropertyChanged("PASSWORD");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USERSROLES", Storage="_USERSROLES", ThisKey="ID", OtherKey="user")]
		public EntitySet<USERSROLES> USERSROLES
		{
			get
			{
				return this._USERSROLES;
			}
			set
			{
				this._USERSROLES.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERSROLES(USERSROLES entity)
		{
			this.SendPropertyChanging();
			entity.USER1 = this;
		}
		
		private void detach_USERSROLES(USERSROLES entity)
		{
			this.SendPropertyChanging();
			entity.USER1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PASSWORD")]
	public partial class PASSWORD : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _skrot;
		
		private decimal _sol;
		
		private decimal _liczba;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnskrotChanging(string value);
    partial void OnskrotChanged();
    partial void OnsolChanging(decimal value);
    partial void OnsolChanged();
    partial void OnliczbaChanging(decimal value);
    partial void OnliczbaChanged();
    #endregion
		
		public PASSWORD()
		{
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_skrot", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string skrot
		{
			get
			{
				return this._skrot;
			}
			set
			{
				if ((this._skrot != value))
				{
					this.OnskrotChanging(value);
					this.SendPropertyChanging();
					this._skrot = value;
					this.SendPropertyChanged("skrot");
					this.OnskrotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sol", DbType="Decimal(18,0) NOT NULL")]
		public decimal sol
		{
			get
			{
				return this._sol;
			}
			set
			{
				if ((this._sol != value))
				{
					this.OnsolChanging(value);
					this.SendPropertyChanging();
					this._sol = value;
					this.SendPropertyChanged("sol");
					this.OnsolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_liczba", DbType="Decimal(18,0) NOT NULL")]
		public decimal liczba
		{
			get
			{
				return this._liczba;
			}
			set
			{
				if ((this._liczba != value))
				{
					this.OnliczbaChanging(value);
					this.SendPropertyChanging();
					this._liczba = value;
					this.SendPropertyChanged("liczba");
					this.OnliczbaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_PASSWORD", Storage="_USER", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.PASSWORD = null;
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.PASSWORD = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.USERSROLES")]
	public partial class USERSROLES : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _id;
		
		private System.Nullable<decimal> _role;
		
		private System.Nullable<int> _user;
		
		private EntityRef<USER> _USER1;
		
		private EntityRef<ROLES> _ROLES;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(decimal value);
    partial void OnidChanged();
    partial void OnroleChanging(System.Nullable<decimal> value);
    partial void OnroleChanged();
    partial void OnuserChanging(System.Nullable<int> value);
    partial void OnuserChanged();
    #endregion
		
		public USERSROLES()
		{
			this._USER1 = default(EntityRef<USER>);
			this._ROLES = default(EntityRef<ROLES>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					if (this._ROLES.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[user]", Storage="_user", DbType="Int")]
		public System.Nullable<int> user
		{
			get
			{
				return this._user;
			}
			set
			{
				if ((this._user != value))
				{
					this.OnuserChanging(value);
					this.SendPropertyChanging();
					this._user = value;
					this.SendPropertyChanged("user");
					this.OnuserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_USERSROLES", Storage="_USER1", ThisKey="user", OtherKey="ID", IsForeignKey=true)]
		public USER USER1
		{
			get
			{
				return this._USER1.Entity;
			}
			set
			{
				USER previousValue = this._USER1.Entity;
				if (((previousValue != value) 
							|| (this._USER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER1.Entity = null;
						previousValue.USERSROLES.Remove(this);
					}
					this._USER1.Entity = value;
					if ((value != null))
					{
						value.USERSROLES.Add(this);
						this._user = value.ID;
					}
					else
					{
						this._user = default(Nullable<int>);
					}
					this.SendPropertyChanged("USER1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLES_USERSROLES", Storage="_ROLES", ThisKey="role", OtherKey="ID", IsForeignKey=true)]
		public ROLES ROLES
		{
			get
			{
				return this._ROLES.Entity;
			}
			set
			{
				ROLES previousValue = this._ROLES.Entity;
				if (((previousValue != value) 
							|| (this._ROLES.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROLES.Entity = null;
						previousValue.USERSROLES.Remove(this);
					}
					this._ROLES.Entity = value;
					if ((value != null))
					{
						value.USERSROLES.Add(this);
						this._role = value.ID;
					}
					else
					{
						this._role = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("ROLES");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROLES")]
	public partial class ROLES : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _ID;
		
		private string _rola;
		
		private EntitySet<USERSROLES> _USERSROLES;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(decimal value);
    partial void OnIDChanged();
    partial void OnrolaChanging(string value);
    partial void OnrolaChanged();
    #endregion
		
		public ROLES()
		{
			this._USERSROLES = new EntitySet<USERSROLES>(new Action<USERSROLES>(this.attach_USERSROLES), new Action<USERSROLES>(this.detach_USERSROLES));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rola", DbType="NVarChar(50)")]
		public string rola
		{
			get
			{
				return this._rola;
			}
			set
			{
				if ((this._rola != value))
				{
					this.OnrolaChanging(value);
					this.SendPropertyChanging();
					this._rola = value;
					this.SendPropertyChanged("rola");
					this.OnrolaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROLES_USERSROLES", Storage="_USERSROLES", ThisKey="ID", OtherKey="role")]
		public EntitySet<USERSROLES> USERSROLES
		{
			get
			{
				return this._USERSROLES;
			}
			set
			{
				this._USERSROLES.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_USERSROLES(USERSROLES entity)
		{
			this.SendPropertyChanging();
			entity.ROLES = this;
		}
		
		private void detach_USERSROLES(USERSROLES entity)
		{
			this.SendPropertyChanging();
			entity.ROLES = null;
		}
	}
}
#pragma warning restore 1591
